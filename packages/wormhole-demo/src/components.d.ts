/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FakeConsumer {
        "data": any;
        "message": string;
        "wasConnectedCallbackCalled": any;
        "wasDisconnectedCallbackCalled": any;
    }
    interface FakeUniverse {
        "state": Record<string, any>;
        "wasConnectedCallbackCalled": any;
        "wasDisconnectedCallbackCalled": any;
    }
}
declare global {
    interface HTMLFakeConsumerElement extends Components.FakeConsumer, HTMLStencilElement {
    }
    var HTMLFakeConsumerElement: {
        prototype: HTMLFakeConsumerElement;
        new (): HTMLFakeConsumerElement;
    };
    interface HTMLFakeUniverseElement extends Components.FakeUniverse, HTMLStencilElement {
    }
    var HTMLFakeUniverseElement: {
        prototype: HTMLFakeUniverseElement;
        new (): HTMLFakeUniverseElement;
    };
    interface HTMLElementTagNameMap {
        "fake-consumer": HTMLFakeConsumerElement;
        "fake-universe": HTMLFakeUniverseElement;
    }
}
declare namespace LocalJSX {
    interface FakeConsumer {
        "data": any;
        "message": string;
        "wasConnectedCallbackCalled"?: any;
        "wasDisconnectedCallbackCalled"?: any;
    }
    interface FakeUniverse {
        "state"?: Record<string, any>;
        "wasConnectedCallbackCalled"?: any;
        "wasDisconnectedCallbackCalled"?: any;
    }
    interface IntrinsicElements {
        "fake-consumer": FakeConsumer;
        "fake-universe": FakeUniverse;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fake-consumer": LocalJSX.FakeConsumer & JSXBase.HTMLAttributes<HTMLFakeConsumerElement>;
            "fake-universe": LocalJSX.FakeUniverse & JSXBase.HTMLAttributes<HTMLFakeUniverseElement>;
        }
    }
}
